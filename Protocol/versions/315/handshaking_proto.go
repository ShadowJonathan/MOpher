// Generated by protocol_builder
// Do not edit

package _315

import (
	"github.com/ShadowJonathan/mopher/Protocol/lib"
	"io"
)

func (h *Handshake) Id() int { return 0 }
func (h *Handshake) Write(ww io.Writer) (err error) {
	var tmp [2]byte
	if err = lib.WriteVarInt(ww, h.ProtocolVersion); err != nil {
		return
	}
	if err = lib.WriteString(ww, h.Host); err != nil {
		return
	}
	tmp[0] = byte(h.Port >> 8)
	tmp[1] = byte(h.Port >> 0)
	if _, err = ww.Write(tmp[:2]); err != nil {
		return
	}
	if err = lib.WriteVarInt(ww, h.Next); err != nil {
		return
	}
	return
}
func (h *Handshake) Read(rr io.Reader) (err error) {
	var tmp [2]byte
	if h.ProtocolVersion, err = lib.ReadVarInt(rr); err != nil {
		return
	}
	if h.Host, err = lib.ReadString(rr); err != nil {
		return
	}
	if _, err = rr.Read(tmp[:2]); err != nil {
		return
	}
	h.Port = (uint16(tmp[1]) << 0) | (uint16(tmp[0]) << 8)
	if h.Next, err = lib.ReadVarInt(rr); err != nil {
		return
	}
	return
}

func init() {
	packets[lib.Handshaking][lib.Serverbound][0] = func() lib.Packet { return &Handshake{} }
}
